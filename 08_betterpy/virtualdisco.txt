The Best Quartet - Alif Abdullah, Yuqing Wu, Annabel Zhang, and Roshani Shrestha
SoftDev
K08: Investigating the command `$ python3 -m venv ~/myherozero`
2021-09-30

Python doc on venv:
https://docs.python.org/3/library/venv.html?highlight=venv#module-venv

Youtube tutorial on venv by Corey Schafer:
https://www.youtube.com/watch?v=Kg1Yvry_Ydk

After typing this command into the command line of the terminal and pressing
enter, a directory named myherozero is made in the home directory. This directory
contains bin, include, lib, and pyvenv.cfg. Some of these are subdirectories which
contain more items. Upon further inspection with the help of the python documentation,
we now know that the command creates a virtual environment, an isolated space that
allows for different projects to run on different versions of the same library.

Virtual environments each have their own Python binaries. After watching a video
about virtual environments, we gained some insights on how and why it is used.
Virtual environments allow us to have space to install packages specific to certain
projects. For example, if you previously used old libraries for some projects and you
need a new one for this project, if you update the library for the entirety of python
then some of your old code may break.

They also allow you to use different versions of a library. To activate the virtual
environment, use `source myherozero/bin/activate` in the terminal. A pip list lists
all the libraries currently installed in the virtual environment.

- You can pip install different libraries, which will also install the dependencies.
- You can use `pip freeze > requirement.txt` to save the different libraries installed
in a txt file. Entering `deactivate` deactivates the virtual environment.
- To delete the environment you can just delete the directory.
- Entering `pip install -r requirements.txt` would install the same libraries mentioned
 in requirements.txt.
- Entering `python3 -m venv NAME --system-site-packages` would get access to the
global python packages for the virtual environment and entering `pip list --local`
would only list packages installed in the venv (doesnâ€™t include the global ones
installed from above).
